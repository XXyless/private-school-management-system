/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newpackage;

import java.awt.Point;
import java.sql.*;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author İzzet Yılmaz
 */
public class managerInterface extends javax.swing.JFrame {
    
   
    
    Set <String> set = new LinkedHashSet<String>();

    /**
     * Creates new form managerInterface
     */
    public managerInterface() {
        initComponents();
    }
    
    public void refleshList(){
        DefaultTableModel model = (DefaultTableModel)personTable.getModel();
        model.setRowCount(0);
            
        if(studentCheck.isSelected()){
            //checkPersons(1,"SELECT student_id, name, surname FROM student");
            con=cn.ConnectDB();
            try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT student_id, name, surname FROM student");
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("student_id");
                    name = rs.getString("name");
                    surname = rs.getString("surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
                rs.close();
                statement=null;
                cn.DisconnectDB(con);
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(instructorCheck.isSelected()){
            con=cn.ConnectDB();
            try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT staff_id, name, surname FROM staff WHERE role_id=2");
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("staff_id");
                    name = rs.getString("name");
                    surname = rs.getString("surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
                statement=null;
                rs.close();
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(managerCheck.isSelected()){
            con=cn.ConnectDB();
            try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT staff_id, name, surname FROM staff WHERE role_id=1");
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("staff_id");
                    name = rs.getString("name");
                    surname = rs.getString("surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
                rs.close();
                cn.DisconnectDB(con);
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    Connect cn = new Connect();
    Connection con=cn.ConnectDB();
    Statement statement = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        personTable = new javax.swing.JTable();
        studentCheck = new javax.swing.JCheckBox();
        instructorCheck = new javax.swing.JCheckBox();
        managerCheck = new javax.swing.JCheckBox();
        listPerson = new javax.swing.JButton();
        FindPerson = new javax.swing.JTextField();
        addingPerson = new javax.swing.JComboBox<>();
        addPerson = new javax.swing.JButton();
        deletePerson = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        openingFrame = new javax.swing.JComboBox<>();
        openFrame = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        pDeptButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButton2.setText("Log Out");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        personTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "SURNAME"
            }
        ));
        personTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                personTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                personTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(personTable);

        studentCheck.setText("Student");
        studentCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentCheckActionPerformed(evt);
            }
        });

        instructorCheck.setText("Instructor");

        managerCheck.setText("Manager");

        listPerson.setText("Show");
        listPerson.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPersonMouseClicked(evt);
            }
        });
        listPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPersonActionPerformed(evt);
            }
        });

        FindPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindPersonActionPerformed(evt);
            }
        });
        FindPerson.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FindPersonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FindPersonKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FindPersonKeyTyped(evt);
            }
        });

        addingPerson.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Instructor", "Manager", "Class", "Course" }));
        addingPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addingPersonActionPerformed(evt);
            }
        });

        addPerson.setText("Add");
        addPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersonActionPerformed(evt);
            }
        });

        deletePerson.setText("Delete");
        deletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePersonActionPerformed(evt);
            }
        });

        jLabel1.setText("Find Person:");

        openingFrame.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Classes", "Courses" }));

        openFrame.setText("Show");
        openFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFrameActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        pDeptButton.setText("Pay Dept");
        pDeptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pDeptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(FindPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(studentCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(instructorCheck)
                                                .addComponent(managerCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(listPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(62, 62, 62))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(addingPerson, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(openingFrame, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(addPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(openFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                                        .addGap(22, 22, 22)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deletePerson, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pDeptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(studentCheck)
                .addGap(3, 3, 3)
                .addComponent(instructorCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(managerCheck)
                .addGap(18, 18, 18)
                .addComponent(listPerson)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addingPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPerson))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openingFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openFrame))
                .addContainerGap(96, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(deletePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(editButton)
                .addGap(28, 28, 28)
                .addComponent(pDeptButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FindPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void studentCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentCheckActionPerformed

    private void listPersonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPersonMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_listPersonMouseClicked

    private void FindPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindPersonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FindPersonActionPerformed

    private void listPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPersonActionPerformed
        // TODO add your handling code here:
        /*DefaultTableModel model = (DefaultTableModel)personTable.getModel();
        model.setRowCount(0);
            
        if(studentCheck.isSelected()){
            //checkPersons(1,"SELECT student_id, name, surname FROM student");
                try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT student_id, name, surname FROM student");
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("student_id");
                    name = rs.getString("name");
                    surname = rs.getString("surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(instructorCheck.isSelected()){
                try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT staff_id, name, surname FROM staff WHERE role_id=2");
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("staff_id");
                    name = rs.getString("name");
                    surname = rs.getString("surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(managerCheck.isSelected()){
                try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT staff_id, name, surname FROM staff WHERE role_id=1");
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("staff_id");
                    name = rs.getString("name");
                    surname = rs.getString("surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        */
        refleshList();
    }//GEN-LAST:event_listPersonActionPerformed

    private void addPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersonActionPerformed
        // TODO add your handling code here:
        String control;
        control = (String) addingPerson.getSelectedItem();
        if(control.equals("Student")){
            addStudent yeni=new addStudent();
            yeni.setVisible(true);
        }else if(control.equals("Instructor")){
            addInstructor yeni= new addInstructor();
            yeni.setVisible(true);
        }else if(control.equals("Manager")){
            addManager yeni=new addManager();
            yeni.setVisible(true);
        }else if(control.equals("Class")){
            addClass yeni=new addClass();
            yeni.setVisible(true);
        }else{
            addCourse yeni=new addCourse();
            yeni.setVisible(true);
        }
    }//GEN-LAST:event_addPersonActionPerformed

    private void addingPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addingPersonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addingPersonActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
            dispose();
            Login_Screen yeni=new Login_Screen();
            yeni.setVisible(true);
    }//GEN-LAST:event_jButton2MouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)personTable.getModel();
        int selected_row = personTable.getSelectedRow();
        if(selected_row == -1)  JOptionPane.showMessageDialog(this, "Select a Row!");
        else{
            int id = (int) model.getValueAt(selected_row, 0);
            if(id>1000){
                try {
                    new addStudent(id).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(managerInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                con=cn.ConnectDB();
                try {
                    statement = con.createStatement();
                    ResultSet rs = statement.executeQuery("SELECT role_id FROM staff WHERE staff_id =" + id);
                    if(rs.next()){
                        System.out.println(rs.getInt("role_id"));
                        if(rs.getInt("role_id") == 1){
                            new addManager(id).setVisible(true);
                        }else{
                            new addInstructor(id).setVisible(true);
                        }
                    }
                    rs.close();
                    cn.DisconnectDB(con);
                    statement=null;
                } catch (SQLException ex) {
                    Logger.getLogger(managerInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void FindPersonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindPersonKeyTyped
 
    }//GEN-LAST:event_FindPersonKeyTyped

    private void FindPersonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindPersonKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_FindPersonKeyPressed

    private void openFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFrameActionPerformed
        String control;
        control = (String) openingFrame.getSelectedItem();
        if(control.equals("Classes")){
            try {
                classInterface yeni;
                yeni = new classInterface();
                yeni.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(managerInterface.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex);
            }
            
        }else if(control.equals("Courses")){
            courseInterface yeni= new courseInterface();
            yeni.setVisible(true);
        }
    }//GEN-LAST:event_openFrameActionPerformed

    private void pDeptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pDeptButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)personTable.getModel();
        int selected_row = personTable.getSelectedRow();
        if(selected_row == -1)  JOptionPane.showMessageDialog(this, "Select a Row!");
        else{
            int id = (int) model.getValueAt(selected_row, 0);
            System.out.println(id);
            if(id>1000){
                try {
                    new pDept(id).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(managerInterface.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
            } else{
                JOptionPane.showMessageDialog(this, "Please select a student!");
            }
        }
        
    }//GEN-LAST:event_pDeptButtonActionPerformed

    private void deletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePersonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)personTable.getModel();
        int selected_row = personTable.getSelectedRow();
        if(selected_row == -1)  JOptionPane.showMessageDialog(this, "Select a Row!");
        else{
            con=cn.ConnectDB();
            int id = (int) model.getValueAt(selected_row, 0);
            if(id>1000){
                try {
                    statement = con.createStatement();
                    statement.executeUpdate("DELETE FROM student_address WHERE student_address.student_id=" + id);
                    statement.executeUpdate("DELETE FROM student_phone WHERE student_phone.student_id=" + id);
                    statement.executeUpdate("DELETE FROM payment WHERE payment.student_id=" + id);
                    statement.executeUpdate("DELETE FROM student WHERE student.student_id="+id);
                } catch (SQLException ex) {
                    Logger.getLogger(managerInterface.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
            }else{
                try {
                    statement = con.createStatement();
                    statement.executeUpdate("DELETE FROM staff_address WHERE staff_address.staff_id=" + id);
                    statement.executeUpdate("DELETE FROM staff_phone WHERE staff_phone.staff_id=" + id);
                    statement.executeUpdate("DELETE FROM staff WHERE staff.staff_id=" + id);
                } catch (SQLException ex) {
                    Logger.getLogger(managerInterface.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
            cn.DisconnectDB(con);
            statement=null;
        }
        refleshList();
    }//GEN-LAST:event_deletePersonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void FindPersonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FindPersonKeyReleased
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)personTable.getModel();
        model.setRowCount(0);
        if(studentCheck.isSelected()){
            con=cn.ConnectDB();
            try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT student.name,student.surname,student.student_id FROM student WHERE student.name LIKE '" + (String)FindPerson.getText() + "%'");
                    System.out.println((String)FindPerson.getText());
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("student.student_id");
                    name = rs.getString("student.name");
                    surname = rs.getString("student.surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
                rs.close();
                statement=null;
                cn.DisconnectDB(con);
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(instructorCheck.isSelected()){
            con=cn.ConnectDB();
            try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT staff.name ,staff.staff_id, staff.surname FROM staff WHERE staff.role_id= 2 AND staff.name LIKE '" + (String)FindPerson.getText() + "%'");
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("staff.staff_id");
                    name = rs.getString("staff.name");
                    surname = rs.getString("staff.surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
                rs.close();
                statement=null;
                cn.DisconnectDB(con);
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(managerCheck.isSelected()){
            con=cn.ConnectDB();
            try {
                statement = con.createStatement();
                ResultSet rs = statement.executeQuery("SELECT staff.name ,staff.staff_id, staff.surname FROM staff WHERE staff.role_id= 1 AND staff.name LIKE '" + (String)FindPerson.getText() + "%'");
                int id;
                String name, surname;
                while(rs.next()){
                    id = rs.getInt("staff.staff_id");
                    name = rs.getString("staff.name");
                    surname = rs.getString("staff.surname");
                    Object[] adding = {id,name,surname};
                    model.addRow(adding);
                }
                rs.close();
                statement=null;
                cn.DisconnectDB(con);
            } catch (SQLException ex) {
                    Logger.getLogger(Login_Screen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_FindPersonKeyReleased

    private void personTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_personTableMouseClicked

    private void personTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personTableMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_personTableMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(managerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(managerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(managerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(managerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new managerInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FindPerson;
    private javax.swing.JButton addPerson;
    private javax.swing.JComboBox<String> addingPerson;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton deletePerson;
    private javax.swing.JButton editButton;
    private javax.swing.JCheckBox instructorCheck;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listPerson;
    private javax.swing.JCheckBox managerCheck;
    private javax.swing.JButton openFrame;
    private javax.swing.JComboBox<String> openingFrame;
    private javax.swing.JButton pDeptButton;
    private javax.swing.JTable personTable;
    private javax.swing.JCheckBox studentCheck;
    // End of variables declaration//GEN-END:variables

    private void getText() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private Object frame(int i, int id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
